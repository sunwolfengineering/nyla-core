---
description: 
globs: 
alwaysApply: true
---
# Development Workflow Guide

All development work in the Nyla project must follow these established practices and workflows to maintain consistency and quality.

## Environment Requirements

### Required Tools
- Go 1.24 or later
- Node.js 22 LTS or later (build tools only)
- SQLite 3.39.0 or later
- Docker (optional, for container testing)

### Development Setup
Follow the setup guide in [Development Guide](mdc:specs/development.md) for:
- Local environment configuration
- Database initialization
- Development server setup
- Test data population

## Code Organization

```
nyla/
├── api/           # API handlers and middleware
├── cmd/           # Command line tools
├── internal/      # Internal packages
├── migrations/    # Database migrations
├── static/        # Static assets
├── templates/     # HTML templates
└── web/           # Web interface handlers
```

## Git Workflow

### Branch Naming
- Feature branches: `feature/description`
- Bug fixes: `fix/description`
- Documentation: `docs/description`
- Linear tickets: Use auto-generated branch names

### Commit Messages
Follow conventional commits:
```
type(scope): description

[optional body]

[optional footer]
```

Types:
- feat: New feature
- fix: Bug fix
- docs: Documentation
- chore: Maintenance
- test: Test updates
- refactor: Code restructuring

### Pull Request Process
1. Create branch from main
2. Implement changes
3. Ensure tests pass locally
4. Submit PR with:
   - Clear description
   - Link to Linear ticket
   - Test coverage
   - Migration scripts if needed
5. Address review feedback
6. Squash and merge

## Testing Requirements

### Unit Testing
- Go tests for business logic
- Table-driven tests for data processing
- Mocked external dependencies
- Minimum 80% coverage

### Integration Testing
- API endpoint testing
- Database operations
- Event processing pipeline
- Real-time update system

### End-to-End Testing
- Core user journeys
- Dashboard functionality
- Data collection flow
- Export/import operations

## Build Process

### Frontend Assets
- Use esbuild for JS minification
- PostCSS for Tailwind processing
- Assets embedded via go:embed
- No external asset server needed

### Backend Binary
- Single static binary
- Embedded templates and assets
- SQLite as only external dependency
- Simple deployment requirements

## Quality Standards

### Code Quality
- Go formatting via gofmt
- Go linting via golangci-lint
- SQL migrations validation
- Template syntax checking
- Security scanning with gosec

### Performance Requirements
- JS tracker under 5KB gzipped
- Query optimization required
- Efficient batch processing
- Real-time capabilities via SSE

### Documentation
- Update technical specs for changes
- Include inline code documentation
- Update README for new features
- Keep SPECS.md current

## Development Commands

```bash
# Start development server
make dev

# Run tests
make test

# Run linters
make lint

# Format code
make fmt

# Build binary
make build

# Build container
make container

# Generate mocks
make generate

# Clean build artifacts
make clean
```

## Debugging Guidelines

### Local Development
- API logs to stdout/stderr
- SQLite database in `data/nyla.db`
- Template cache in `tmp/templates`
- Debug logs with `LOG_LEVEL=debug`

### Production Issues
- Health check endpoint: `/health`
- Metrics endpoint: `/metrics`
- Structured logging with correlation IDs
- Error reporting via sentry (optional)
